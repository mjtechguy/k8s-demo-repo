
curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

k3d cluster create minio --servers 3 --agents 3 -v /server/k3d@agent:0,1,2 -v /server/k3d@server:0,1,2 --k3s-arg "--no-deploy=traefik@server:*"

k3d kubeconfig write minio
cp ~/.k3d/kubeconfig-minio.yaml ~/.kube/config

helm upgrade --install ingress-nginx ingress-nginx --version 4.4.2 --repo https://kubernetes.github.io/ingress-nginx --namespace ingress-nginx --create-namespace --set controller.replicaCount=1

kubectl get ingressclasses.networking.k8s.io

```
kubectl create namespace minio
```

```
apiVersion: v1
kind: Namespace
metadata:
  name: minio1
```

```
kubectl apply -f namespace.yaml
```

kubectl get ns


Both the command and the YAML manifest will create a namespace named `my-namespace`. Feel free to modify the name to suit your needs.

```
kubectl run my-pod --image=nginx --namespace=minio
```

And here's an example of a Kubernetes YAML file to create a pod:

```yaml

apiVersion: v1
kind: Pod
metadata:
  name: nginx
  namespace: minio
spec:
  containers:
  - name: nginx
    image: nginx
```

```
kubectl apply -f pod.yaml
```

kubectl get pods -A 
kubectl get pods -n minio 


```
kubectl create deployment nginx-deployment --image=nginx --replicas=3 --namespace=minio
```



In this command, replace `my-deployment` with the desired name for your deployment, `my-container-image` with the container image you want to use, `3` with the desired number of replicas, and `my-namespace` with the namespace where you want to create the deployment.

And here's an example of a Kubernetes YAML file to create a deployment:

```yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment1
  namespace: minio
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
```



You can save the YAML content to a file (e.g., `deployment.yaml`) and create the deployment using the following command:

```shell
kubectl apply -f nginx-deployment.yaml
```



Replace `my-deployment` with the desired name for your deployment, `my-container-image` with the container image you want to use, `3` with the desired number of replicas, and `my-namespace` with the namespace where you want to create the deployment.

Person: 
- Can you provide a kubernetes command and a kubernetes YAML to create a statefulset for postgres

ChatGPT: 
- Certainly! Here's an example of a Kubernetes command to create a StatefulSet for PostgreSQL:

```shell
kubectl create -f postgres-statefulset.yaml
```



And here's an example of a Kubernetes YAML file to create a StatefulSet for PostgreSQL:

```
apiVersion: v1
kind: Service
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  ports:
  - port: 80
    name: web
  clusterIP: None
  selector:
    app: nginx
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: web
spec:
  serviceName: "nginx"
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: registry.k8s.io/nginx-slim:0.8
        ports:
        - containerPort: 80
          name: web
        volumeMounts:
        - name: www
          mountPath: /usr/share/nginx/html
  volumeClaimTemplates:
  - metadata:
      name: www
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
```



You can save the YAML content to a file (e.g., `postgres-statefulset.yaml`) and create the StatefulSet using the following command:

```shell
kubectl apply -f postgres-statefulset.yaml
```



This YAML creates a StatefulSet with a PostgreSQL container, specifying the number of replicas, container image, environment variables, and volume claims for persistent storage. The PostgreSQL database will be accessible via the service named `postgres`. Modify the values as needed, such as the name, image, password, storage size, etc., to fit your requirements.

Person: 
- Can you provide a kubernetes command and a kubernetes YAML to create a daemonset for fluentbit

ChatGPT: 
- Certainly! Here's an example of a Kubernetes command to create a DaemonSet for Fluent Bit:

```shell
kubectl create -f fluentbit-daemonset.yaml
```



And here's an example of a Kubernetes YAML file to create a DaemonSet for Fluent Bit:

```
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluentd-elasticsearch
  namespace: kube-system
  labels:
    k8s-app: fluentd-logging
spec:
  selector:
    matchLabels:
      name: fluentd-elasticsearch
  template:
    metadata:
      labels:
        name: fluentd-elasticsearch
    spec:
      tolerations:
      # these tolerations are to have the daemonset runnable on control plane nodes
      # remove them if your control plane nodes should not run pods
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      containers:
      - name: fluentd-elasticsearch
        image: quay.io/fluentd_elasticsearch/fluentd:v2.5.2
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - name: varlog
          mountPath: /var/log
      terminationGracePeriodSeconds: 30
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
```



You can save the YAML content to a file (e.g., `fluentbit-daemonset.yaml`) and create the DaemonSet using the following command:

```shell
kubectl apply -f fluentbit-daemonset.yaml
```



This YAML creates a DaemonSet with a single container running Fluent Bit. It mounts a configuration file from a ConfigMap named `fluentbit-config` into the container at the path `/fluent-bit/etc/fluent-bit.conf`. Make sure to provide the appropriate configuration file in the ConfigMap to customize Fluent Bit's behavior. Modify the values such as the name, image, ports, volume mounts, etc., to fit your specific needs.

Person: 
- Can you provide a kubernetes command and a kubernetes YAML to create a persistent volume

ChatGPT: 
- Certainly! Here's an example of a Kubernetes command to create a Persistent Volume:

```shell
kubectl create -f persistent-volume.yaml
```

https://blog.ruanbekker.com/blog/2020/02/21/persistent-volumes-with-k3d-kubernetes/ 


Person: 
- Can you provide a kubernetes command and a kubernetes YAML to create a storageclass

ChatGPT: 
- Certainly! Here's an example of a Kubernetes command to create a StorageClass:

```
kubectl create -f storage-class.yaml
```

And here's an example of a Kubernetes YAML file to create a StorageClass:

```yaml

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: my-storage-class
provisioner: my-provisioner
parameters:
  parameter1: value1
  parameter2: value2
```



You can save the YAML content to a file (e.g., `storage-class.yaml`) and create the StorageClass using the following command:

```shell

kubectl apply -f storage-class.yaml
```



This YAML creates a StorageClass named `my-storage-class` with a provisioner set to `my-provisioner`. You can customize the provisioner and add additional parameters as needed, such as specifying the volume type, reclaim policy, or any other supported parameters specific to your storage solution. Modify the name, provisioner, and parameters according to your requirements.

Person: 
- can you provide a kubernetes cheat sheet with kubectl commands for all core functions of kubernetes

ChatGPT: 
- Certainly! Here's a Kubernetes cheat sheet with commonly used `kubectl` commands for various core functions:

**Cluster Management:**  
- Get cluster information: `kubectl cluster-info` 
- List nodes in the cluster: `kubectl get nodes` 
- List all resources in a namespace: `kubectl get all -n <namespace>`

**Pod Management:**  
- List pods in a namespace: `kubectl get pods -n <namespace>` 
- Describe a pod: `kubectl describe pod <pod-name> -n <namespace>` 
- Create a pod from a YAML file: `kubectl apply -f <pod.yaml>` 
- Delete a pod: `kubectl delete pod <pod-name> -n <namespace>`

**Deployment Management:**  
- List deployments in a namespace: `kubectl get deployments -n <namespace>` 
- Describe a deployment: `kubectl describe deployment <deployment-name> -n <namespace>` 
- Scale a deployment: `kubectl scale deployment <deployment-name> --replicas=<replica-count> -n <namespace>` 
- Update a deployment: `kubectl apply -f <deployment.yaml>` 
- Delete a deployment: `kubectl delete deployment <deployment-name> -n <namespace>`

**Service Management:**  
- List services in a namespace: `kubectl get services -n <namespace>` 
- Describe a service: `kubectl describe service <service-name> -n <namespace>` 
- Expose a deployment as a service: `kubectl expose deployment <deployment-name> --type=ClusterIP --port=<port> -n <namespace>` 
- Delete a service: `kubectl delete service <service-name> -n <namespace>`

**Namespace Management:**  
- List namespaces: `kubectl get namespaces` 
- Create a new namespace: `kubectl create namespace <namespace-name>` 
- Switch to a namespace: `kubectl config set-context --current --namespace=<namespace>`

**ConfigMap Management:**  
- List ConfigMaps in a namespace: `kubectl get configmaps -n <namespace>` 
- Describe a ConfigMap: `kubectl describe configmap <configmap-name> -n <namespace>` 
- Create a ConfigMap from a file: `kubectl create configmap <configmap-name> --from-file=<path-to-file> -n <namespace>` 
- Delete a ConfigMap: `kubectl delete configmap <configmap-name> -n <namespace>`

**Secret Management:**  
- List secrets in a namespace: `kubectl get secrets -n <namespace>` 
- Describe a secret: `kubectl describe secret <secret-name> -n <namespace>` 
- Create a secret: `kubectl create secret generic <secret-name> --from-literal=<key>=<value> -n <namespace>` 
- Delete a secret: `kubectl delete secret <secret-name> -n <namespace>`

**PersistentVolume Management:**  
- List PersistentVolumes: `kubectl get pv` 
- Describe a PersistentVolume: `kubectl describe pv <pv-name>` 
- Create a PersistentVolume from a YAML file: `kubectl apply -f <pv.yaml>` 
- Delete a PersistentVolume: `kubectl delete pv <pv-name>`

**PersistentVolumeClaim Management:**  
- List PersistentVolumeClaims in a namespace: `kubectl get pvc -n <namespace>` 
- Describe a PersistentVolumeClaim: `kubectl describe pvc <pvc-name> -n <namespace>` 
- Create a PersistentVolumeClaim from a YAML file: `kubectl apply -f <pvc.yaml>` 
- Delete a PersistentVolumeClaim: `kubectl delete pvc <pvc-name> -n <namespace>`

These are some of the common `kubectl` commands for core Kubernetes functions. Remember to replace `<namespace>`, `<pod-name>`, `<deployment-name>`, `<service-name>`, `<configmap-name>`, `<secret-name>`, `<

Person: 
- continue

ChatGPT: 
- pv-name>`, `<pvc-name>`, `<port>`, `<replica-count>`, and `<path-to-file>`with appropriate values based on your specific scenario. Additionally, you can explore more`kubectl` commands and options by referring to the official Kubernetes documentation and resources.

Please note that the provided commands are basic examples, and you may need to customize them further based on your specific requirements and configurations.

Person: 
- can you provide additional commands to add to the above list

ChatGPT: 
- Certainly! Here are some additional `kubectl` commands to add to the list:

**Logs and Debugging:**  
- Stream logs from a pod: `kubectl logs -f <pod-name> -n <namespace>` 
- Get the events related to a resource: `kubectl get events -n <namespace>` 
- Exec into a container in a pod: `kubectl exec -it <pod-name> -n <namespace> -- /bin/bash` 
- Port forward to a pod: `kubectl port-forward <pod-name> <local-port>:<pod-port> -n <namespace>`

**StatefulSet Management:**  
- List StatefulSets in a namespace: `kubectl get statefulsets -n <namespace>` 
- Describe a StatefulSet: `kubectl describe statefulset <statefulset-name> -n <namespace>` 
- Scale a StatefulSet: `kubectl scale statefulset <statefulset-name> --replicas=<replica-count> -n <namespace>` 
- Update a StatefulSet: `kubectl apply -f <statefulset.yaml>` 
- Delete a StatefulSet: `kubectl delete statefulset <statefulset-name> -n <namespace>`

**Job and CronJob Management:**  
- List Jobs in a namespace: `kubectl get jobs -n <namespace>` 
- Describe a Job: `kubectl describe job <job-name> -n <namespace>` 
- Create a Job from a YAML file: `kubectl apply -f <job.yaml>` 
- Delete a Job: `kubectl delete job <job-name> -n <namespace>` 
- List CronJobs in a namespace: `kubectl get cronjobs -n <namespace>` 
- Describe a CronJob: `kubectl describe cronjob <cronjob-name> -n <namespace>` 
- Create a CronJob from a YAML file: `kubectl apply -f <cronjob.yaml>` 
- Delete a CronJob: `kubectl delete cronjob <cronjob-name> -n <namespace>`

**Ingress Management:**  
- List Ingress resources in a namespace: `kubectl get ingress -n <namespace>` 
- Describe an Ingress: `kubectl describe ingress <ingress-name> -n <namespace>` 
- Update an Ingress: `kubectl apply -f <ingress.yaml>` 
- Delete an Ingress: `kubectl delete ingress <ingress-name> -n <namespace>`

**Scaling and Autoscaling:**  
- List HorizontalPodAutoscalers (HPA) in a namespace: `kubectl get hpa -n <namespace>` 
- Describe an HPA: `kubectl describe hpa <hpa-name> -n <namespace>` 
- Update an HPA: `kubectl apply -f <hpa.yaml>` 
- List HorizontalPodAutoscaler metrics: `kubectl get hpa <hpa-name> -n <namespace> -o yaml`

These additional commands cover logs, debugging, StatefulSets, Jobs, CronJobs, Ingress, scaling, and autoscaling. Remember to customize the commands with the appropriate values and options for your specific use case.

Person: 
- can you provide additional commands to add to the above list

ChatGPT: 
- Certainly! Here are a few more additional `kubectl` commands to add to the list:

**Secret Management:**  
- List all secrets in all namespaces: `kubectl get secrets --all-namespaces` 
- Describe a specific secret in a specific namespace: `kubectl describe secret <secret-name> -n <namespace>` 
- Get the decoded values of a secret: `kubectl get secret <secret-name> -n <namespace> -o jsonpath="{.data}" | base64 -d`

**ConfigMap Management:**  
- List all ConfigMaps in all namespaces: `kubectl get configmaps --all-namespaces` 
- Describe a specific ConfigMap in a specific namespace: `kubectl describe configmap <configmap-name> -n <namespace>` 
- Get the values of a ConfigMap: `kubectl get configmap <configmap-name> -n <namespace> -o json`

**Network Policies:**  
- List network policies in a namespace: `kubectl get networkpolicies -n <namespace>` 
- Describe a network policy: `kubectl describe networkpolicy <networkpolicy-name> -n <namespace>` 
- Create a network policy from a YAML file: `kubectl apply -f <networkpolicy.yaml>` 
- Delete a network policy: `kubectl delete networkpolicy <networkpolicy-name> -n <namespace>`

**Resource Metrics:**  
- List all available metrics for pods: `kubectl top pods --all-namespaces` 
- List CPU and memory usage for pods: `kubectl top pod -n <namespace>` 
- List CPU and memory usage for nodes: `kubectl top node`

**Rollout Management:**  
- View rollout status: `kubectl rollout status <resource-type>/<resource-name> -n <namespace>` 
- Pause a rollout: `kubectl rollout pause <resource-type>/<resource-name> -n <namespace>` 
- Resume a rollout: `kubectl rollout resume <resource-type>/<resource-name> -n <namespace>` 
- Undo a rollout: `kubectl rollout undo <resource-type>/<resource-name> -n <namespace>` 
- History of rollout revisions: `kubectl rollout history <resource-type>/<resource-name> -n <namespace>`

These additional commands cover secret management, ConfigMap management, network policies, resource metrics, and rollout management. Feel free to customize the commands further based on your specific needs and configurations.

Person: 
- can you provide a list of kubectl plugins to help manage clusters

ChatGPT: 
- Certainly! Here's a list of some useful `kubectl` plugins that can help you manage clusters: 
1. **Krew** : Plugin manager for `kubectl` that allows you to discover and install additional plugins from a plugin index. [Link to Krew](https://krew.sigs.k8s.io/) 
2. **Kubectl Alias** : Provides an easy way to set up and manage aliases for frequently used `kubectl` commands. [Link to Kubectl Alias](https://github.com/ahmetb/kubectl-aliases) 
3. **Kubectl Context** : Helps manage multiple Kubernetes contexts and switch between them easily. [Link to Kubectl Context](https://github.com/ahmetb/kubectx) 
4. **Kubectl Tree** : Displays Kubernetes resources in a tree-like structure for easier visualization and navigation. [Link to Kubectl Tree](https://github.com/ahmetb/kubectl-tree) 
5. **Kubectl View Secret** : Allows you to view the values of a Kubernetes Secret in a decoded and readable format. [Link to Kubectl View Secret](https://github.com/elsesiy/kubectl-view-secret) 
6. **Kubectl Whoami** : Displays information about the current authenticated user and associated cluster. [Link to Kubectl Whoami](https://github.com/ahmetb/kubectl-whoami) 
7. **Kubectl Neat** : Formats and cleans up `kubectl` output for better readability. [Link to Kubectl Neat](https://github.com/itaysk/kubectl-neat) 
8. **Kubectl Kubectx Completion** : Provides shell completion support for the `kubectx` command. [Link to Kubectl Kubectx Completion](https://github.com/ahmetb/kubectx/blob/master/completion/kubectx.bash) 
9. **Kubectl Grep** : Allows you to search for specific keywords or patterns within the output of `kubectl` commands. [Link to Kubectl Grep](https://github.com/ibuildthecloud/kubectl-node-shell) 
10. **Kubectl Node Shell** : Provides a shell environment inside a running container on a Kubernetes node for debugging purposes. [Link to Kubectl Node Shell](https://github.com/ibuildthecloud/kubectl-node-shell)

These plugins can enhance your `kubectl` experience and provide additional functionality for managing clusters. Make sure to follow the installation and usage instructions provided by each plugin's respective documentation.

Person: 
- can you provide a cheatsheet on how to use k9s

ChatGPT: 
- Certainly! Here's a cheatsheet on how to use k9s:

**Basic Navigation:**  
- Launch k9s: Run `k9s` in your terminal. 
- Switch Contexts: Press `:` and enter the context name. 
- Switch Namespaces: Press `n` and enter the namespace name. 
- Navigate Resources: Use the arrow keys or `j` (down) and `k` (up) to navigate through the resources.

**Resource Operations:**  
- Create a Resource: Press `Shift+a` and enter the resource YAML or JSON. 
- Describe a Resource: Press `d` to view the details of the selected resource. 
- Edit a Resource: Press `e` to edit the selected resource in your default editor. 
- Delete a Resource: Press `Shift+d` to delete the selected resource. 
- Execute a Command: Press `:` and enter a command, such as `exec`, `logs`, or `port-forward`.

**Filtering and Searching:**  
- Filter Resources: Press `/` to activate filtering, then enter the search term. 
- Clear Filters: Press `Esc` to clear the active filter. 
- Search within a Resource: Press `/` within a resource view and enter the search term. 
- Clear Resource Search: Press `Esc` within a resource view to clear the search.

**Additional Operations:**  
- Toggle Resource View: Press `Shift+r` to switch between a regular view and a raw resource view. 
- Toggle Full-Screen Mode: Press `Shift+x` to toggle full-screen mode. 
- Sort Resources: Press `Shift+s` to sort the resources by different fields. 
- Copy Resource Data: Use `Ctrl+c` to copy selected resource data.

These are some of the commonly used commands and operations in k9s. Remember to refer to the official k9s documentation for more detailed information and additional features.

Person: 
- can you provide a tool that can visualize a kubernetes deployment and the code to deploy that tool

ChatGPT: 
- Certainly! One popular tool for visualizing Kubernetes deployments is called "Kubeview." It provides an interactive and graphical representation of your Kubernetes cluster, including deployments, pods, services, and more.

To deploy Kubeview, you can use the following code:

```yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubeview
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubeview
  template:
    metadata:
      labels:
        app: kubeview
    spec:
      containers:
      - name: kubeview
        image: dgkanatsios/kubeview:0.3.0
        ports:
        - containerPort: 8080
        args:
        - "--enable-k8s-api-server"
        - "--enable-k8s-api-server-proxy"
        - "--port=8080"
```



Save the above code to a YAML file, e.g., `kubeview-deployment.yaml`, and then deploy it using the following command:

```shell

kubectl apply -f kubeview-deployment.yaml
```



This will create a deployment named `kubeview` with a single replica running the Kubeview container. Kubeview exposes port 8080, which can be accessed to view the graphical representation of your Kubernetes cluster.

Once the deployment is up and running, you can access Kubeview by port-forwarding the service or exposing it as a NodePort or LoadBalancer service, depending on your cluster setup.

Note that the Kubeview image used in the deployment is `dgkanatsios/kubeview:0.3.0`. Be sure to check for the latest version and update the image tag accordingly.

Please note that Kubeview is a third-party tool and not officially supported or maintained by Kubernetes. Make sure to review the tool's documentation for any additional configuration or customization options.

Person: 
- are they any other tools to visualize a kubernetes cluster?

ChatGPT: 
- Yes, there are several other tools available to visualize a Kubernetes cluster. Here are a few popular ones: 
1. **Lens** : Lens is a powerful and feature-rich Kubernetes IDE that provides a visual representation of your cluster, including resource views, cluster health, and real-time metrics. It supports both local and remote clusters and offers advanced features for monitoring and debugging. [Link to Lens](https://k8slens.dev/) 
2. **Octant** : Octant is a highly extensible web-based dashboard for Kubernetes that provides a graphical view of your cluster. It offers an intuitive interface with detailed information about your resources, logs, events, and more. Octant also supports plugins to extend its functionality. [Link to Octant](https://octant.dev/) 
3. **Kubernetes Dashboard** : Kubernetes Dashboard is an official web-based UI provided by Kubernetes itself. It offers a comprehensive view of your cluster, including deployments, services, pods, and more. Kubernetes Dashboard is typically deployed as a separate service within your cluster. [Link to Kubernetes Dashboard](https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/) 
4. **Weave Scope** : Weave Scope provides a real-time graphical representation of your Kubernetes cluster, showing the relationships between pods, services, and other resources. It helps visualize the network connections and resource utilization in your cluster. Weave Scope can be deployed as a standalone application or as a Kubernetes deployment. [Link to Weave Scope](https://www.weave.works/oss/scope/) 
5. **Grafana** : While primarily known as a monitoring and observability tool, Grafana can also be used to visualize your Kubernetes cluster. With its rich set of plugins and integrations, Grafana can pull metrics and data from various sources to create custom dashboards and visualizations for your cluster. [Link to Grafana](https://grafana.com/)

These tools offer different levels of visualization and functionality, so you can choose the one that best suits your requirements and preferences. Remember to review each tool's documentation for installation instructions and configuration details.

Person: 
- can you provide instructions on deploying octant

ChatGPT: 
- Certainly! Here are instructions on how to deploy Octant: 
1. **Download Octant** : Visit the Octant GitHub releases page at [https://github.com/vmware-tanzu/octant/releases](https://github.com/vmware-tanzu/octant/releases)  and download the appropriate binary for your operating system. 
2. **Install Octant** : After downloading the Octant binary, extract the contents of the archive and place the `octant` binary in a directory included in your system's `PATH`. 
3. **Start Octant** : Open a terminal or command prompt and run the following command to start Octant:

```shell

octant
```



By default, Octant will attempt to connect to your local Kubernetes cluster. 
4. **Access Octant UI** : Octant provides a web-based user interface that you can access via your web browser. The default URL is [http://localhost:7777](http://localhost:7777/) . Open your browser and enter this URL to access the Octant UI.

If you are connecting to a remote cluster or a cluster with RBAC enabled, Octant may require additional permissions. You can provide the necessary kubeconfig file or context by specifying the `--kubeconfig` or `--context` flags when starting Octant. For example:

```shell

octant --kubeconfig /path/to/kubeconfig
```



Alternatively, you can use the `KUBECONFIG` environment variable to set the path to your kubeconfig file. 
5. **Explore and Visualize** : Once you access the Octant UI, you will see a graphical representation of your Kubernetes cluster. You can navigate through different resources, view details, examine logs, and access other functionalities provided by Octant.

Octant also supports plugins that enhance its capabilities. You can find a list of available plugins on the Octant website at [https://octant.dev/](https://octant.dev/) .

Remember to consult the Octant documentation for more information on advanced configuration options and usage details.
